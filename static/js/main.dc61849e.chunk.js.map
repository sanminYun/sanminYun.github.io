{"version":3,"sources":["components/ScoreBoard.js","actions/index.js","components/Player.js","js/common.js","reducer.js","store.js","components/Counter.js","components/Result.js","components/Retry.js","components/Quit.js","components/Setting.js","App.js","index.js"],"names":["connect","state","ownProps","playerRoundWin","computerRoundWin","playerSetWin","computerSetWin","className","ActionCreators","isStart","dispatch","onSelect","rps","type","selectRps","onClick","SelectRandomRps","Math","floor","random","DecideResult","playerInput","computerInput","Result","DRAW","PLAYER_LOSE","PLAYER_WIN","console","error","initialState","win","mCounter","time","computerRps","result","resultForDisplay","totalSet","totalRound","limitTime","reducer","action","log","clearInterval","parseInt","store","createStore","start","setInterval","retry","quit","set","round","settingSet","e","value","target","settingRound","settingLimitTime","id","onChange","App","isAuto","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc61849e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst ScoreBoard = ({playerRoundWin, computerRoundWin, playerSetWin, computerSetWin}) => {\r\n    return(\r\n        <div className={\"sb-container\"}>\r\n            <h1>\r\n                Score Board\r\n            </h1>\r\n            <div className={\"sb\"}>\r\n                <strong>player set</strong> {playerSetWin} : {computerSetWin} <strong>computer set</strong>\r\n            </div>\r\n            <div className={\"sb\"}>\r\n                <strong>player round</strong> {playerRoundWin} : {computerRoundWin} <strong>computer round</strong>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        playerRoundWin: state.playerRoundWin,\r\n        computerRoundWin: state.computerRoundWin,\r\n        playerSetWin: state.playerSetWin,\r\n        computerSetWin:state.computerSetWin,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(ScoreBoard);","// export const SETTING_ROUND = 'SETTING_ROUND';\r\n// export const SETTING_SET = 'SETTING_SET';\r\n// export const SETTING_LIMIT_TIME = 'SETTING_LIMIT_TIME';\r\n// export const SELECT = 'SELECT';\r\n// export const START = 'START';\r\n// export const STOP = 'STOP';\r\n// export const COUNT_DOWN = 'COUNT_DOWN';\r\n// export const RETRY = 'RETRY';\r\n// export const QUIT = 'QUIT';\r\n// export const UPDATE = 'UPDATE';\r\n\r\nexport const ActionCreators = {\r\n    TIME_OVER:'TIME_OVER',\r\n    SETTING_ROUND: 'SETTING_ROUND',\r\n    SETTING_SET:'SETTING_SET',\r\n    SETTING_LIMIT_TIME:'SETTING_LIMIT_TIME',\r\n    SELECT:'SELECT',\r\n    START:'START',\r\n    STOP:'STOP',\r\n    COUNT_DOWN:'COUNT_DOWN',\r\n    RETRY:'RETRY',\r\n    QUIT:'QUIT',\r\n    UPDATE:'UPDATE',\r\n    LOSE:'LOSE',\r\n    WIN:'WIN',\r\n    DRAW:'DRAW',\r\n};\r\n\r\nexport const selectRps = rps => {\r\n    return{\r\n        type:ActionCreators.SELECT,\r\n        rps,\r\n    }\r\n};\r\n\r\nexport const startGame = (mCounter) => {\r\n    return {\r\n        type: ActionCreators.START,\r\n        isStart:true,\r\n        mCounter,\r\n    }\r\n};\r\n\r\nexport const countDown = () => {\r\n    return{\r\n        type: ActionCreators.COUNT_DOWN,\r\n    }\r\n};\r\n\r\nexport const stopGame = () => {\r\n\r\n    return {\r\n        type: ActionCreators.STOP,\r\n        isStart:false,\r\n    }\r\n};\r\n\r\nexport const settingSet = (value) => {\r\n    return {\r\n        type: ActionCreators.SETTING_SET,\r\n        totalSet:parseInt(value),\r\n    }\r\n};\r\nexport const settingRound = (value) => {\r\n    return {\r\n        type: ActionCreators.SETTING_ROUND,\r\n        totalRound:parseInt(value),\r\n    }\r\n};\r\nexport const settingLimitTime = (value) => {\r\n    return {\r\n        type: ActionCreators.SETTING_LIMIT_TIME,\r\n        limitTime:parseInt(value),\r\n    }\r\n};\r\n\r\nexport const retry = () => {\r\n    return{\r\n        type: ActionCreators.RETRY,\r\n    }\r\n};\r\nexport const quit = () => {\r\n    return{\r\n        type: ActionCreators.QUIT,\r\n    }\r\n};","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {selectRps, stopGame} from \"../actions\";\r\n\r\nconst Player = ({onSelect, isStart}) => {\r\n    return(\r\n        <div>\r\n            <h1>Player</h1>\r\n            <button\r\n                className={\"btn-rps\"}\r\n                onClick={\r\n                    () => {\r\n                        if(!isStart) return;\r\n                        onSelect(\"가위\");\r\n                    }\r\n                }\r\n\r\n            >가위\r\n            </button>\r\n            <button\r\n                className={\"btn-rps\"}\r\n                onClick={\r\n                    () => {\r\n                        if(!isStart) return;\r\n                        onSelect(\"바위\");\r\n                    }\r\n                }\r\n            >바위\r\n            </button>\r\n            <button\r\n                className={\"btn-rps\"}\r\n                onClick={\r\n                    () => {\r\n                        if(!isStart) return;\r\n                        onSelect(\"보\");\r\n                    }\r\n                }\r\n            >보\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onSelect: rps => {\r\n            dispatch(selectRps(rps));\r\n            dispatch(stopGame());\r\n        }\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    //console.log(state);\r\n    return {\r\n        // ...ownProps,\r\n        isStart: state.isStart,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Player);","//랜덤으로 가위바위보를 뽑음\r\nexport const SelectRandomRps = () => {\r\n    const rps = ['바위', '보', '가위'];\r\n    return rps[Math.floor(Math.random() * 3)];\r\n};\r\n\r\n//누가 이겼는지 검사하는 함수\r\nexport const DecideResult = (playerInput, computerInput) => {\r\n    if(playerInput === computerInput) return Result.DRAW; //같은 경우 DRAW\r\n\r\n    if(playerInput === '바위') { //플레이어가 바위를 선택한 경우\r\n        if(computerInput === '보') { //컴퓨터가 보면 Lose\r\n            return Result.PLAYER_LOSE;\r\n        } else if(computerInput === '가위') { //컴퓨터가 가위면 win\r\n            return Result.PLAYER_WIN;\r\n        } else {\r\n            console.error(\"rps 입력값이 잘못되었습니다.\");\r\n            return null;\r\n        }\r\n    } else if (playerInput === '보') { //플레이어가 보를 선택한 경우\r\n        if(computerInput === '바위') { //컴퓨터가 바위면면 Win\r\n            return Result.PLAYER_WIN;\r\n        } else if(computerInput === '가위') { //컴퓨터가 가위면 LOSE\r\n            return Result.PLAYER_LOSE;\r\n        } else {\r\n            console.error(\"rps 입력값이 잘못되었습니다.\");\r\n            return null;\r\n        }\r\n    } else if (playerInput === '가위') { //플레이어가 가위를 선택한 경우\r\n        if(computerInput === '바위') { //컴퓨터가 바위면 LOSE\r\n            return Result.PLAYER_LOSE;\r\n        } else if(computerInput === '보') { //컴퓨터가 보면 WIN\r\n            return Result.PLAYER_WIN;\r\n        } else {\r\n            console.error(\"rps 입력값이 잘못되었습니다.\");\r\n            return null;\r\n        }\r\n    } else {\r\n        console.error(\"rps 입력값이 잘못되었습니다.\");\r\n        return null;\r\n    }\r\n};\r\n\r\nexport const Result = {\r\n    PLAYER_WIN:'PLAYER_WIN',\r\n    PLAYER_LOSE:'PLAYER_LOSE',\r\n    DRAW:'DRAW',\r\n};","import {ActionCreators} from \"./actions\";\r\nimport {DecideResult, Result, SelectRandomRps} from \"./js/common\";\r\n\r\nconst initialState = {\r\n    isStart:false,\r\n    win:null,\r\n    mCounter:null,\r\n    time:0,\r\n    rps:\"\", //유저의 가위바위보\r\n    computerRps:\"\", //컴퓨터 가위바위보\r\n    result: \"\", //가위바위보 결과\r\n    resultForDisplay:\"\",\r\n    totalSet:0,\r\n    totalRound:0,\r\n    limitTime:0,\r\n    playerRoundWin:0, //라운드 승리 횟수\r\n    playerSetWin: 0, //세트 승리 횟수\r\n    computerRoundWin:0, //라운드 승리 횟수\r\n    computerSetWin: 0, //세트 승리 횟수\r\n\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    //console.log(store.getState());\r\n    console.log(action.type);\r\n    switch (action.type) {\r\n        case ActionCreators.START:\r\n            return {\r\n                ...state,\r\n                isStart:action.isStart,\r\n                time: state.limitTime,\r\n                mCounter:action.mCounter,\r\n            };\r\n        case ActionCreators.STOP:\r\n            clearInterval(state.mCounter);\r\n            return{\r\n                ...state,\r\n                isStart:action.isStart,\r\n                mCounter:null,\r\n            };\r\n        case ActionCreators.COUNT_DOWN:\r\n            if(state.time === 1){ //시간이 다 지나면 ClearInterval\r\n                clearInterval(state.mCounter);\r\n                if(state.computerRoundWin + 1 === state.totalRound){ //승리하여 라운드가 승리 라운드에 도달 시 세트 승\r\n                    if(state.computerSetWin + 1 === state.totalSet){ //승리하여 세트가 승리 세트에 도달 시 게임 승리\r\n                        console.log(\"게임 패배\");\r\n                        return{\r\n                            ...state,\r\n                            computerSetWin: state.computerSetWin + 1,\r\n                            computerRoundWin: 0, //0으로 초기화\r\n                            playerRoundWin: 0,\r\n                            win:false,\r\n                            resultForDisplay:\"시간 초과로 게임 패배\",\r\n                            time:0,\r\n                            mCounter: null,\r\n                            isStart:false,\r\n\r\n                        }\r\n                    }\r\n                    return{ //세트 패배\r\n                        ...state,\r\n                        computerSetWin: state.computerSetWin + 1,\r\n                        computerRoundWin: 0, //0으로 초기화\r\n                        playerRoundWin: 0,\r\n                        resultForDisplay: \"시간 초과로 세트 패배\",\r\n                        time:0,\r\n                        mCounter: null,\r\n                        isStart:false,\r\n                    }\r\n\r\n                }\r\n                return { //라운드 패배\r\n                    ...state,\r\n                    computerRoundWin: state.computerRoundWin + 1,\r\n                    resultForDisplay: \"시간 초과로 라운드 패배\",\r\n                    time:0,\r\n                    mCounter: null,\r\n                    isStart:false,\r\n                };\r\n            }\r\n\r\n            return{\r\n                ...state,\r\n                time:parseInt(state.time) - 1,\r\n                mCounter: state.time === 1 ? null : state.mCounter,\r\n                //time:parseInt(state.time) -1,\r\n            };\r\n\r\n\r\n        case ActionCreators.SELECT:\r\n            //console.log(state);\r\n            let computerRps = SelectRandomRps();\r\n            let result = DecideResult(action.rps, computerRps);\r\n            let resultForDisplay = `${action.rps} vs ${computerRps} 로 ${result}`;\r\n\r\n            if(result === Result.PLAYER_WIN) {\r\n                let playerRoundWin = state.playerRoundWin + 1;\r\n                let playerSetWin = state.playerSetWin;\r\n                if(playerRoundWin === state.totalRound){ //승리하여 라운드가 승리 라운드에 도달 시 세트 승\r\n                    playerRoundWin = 0;\r\n                    playerSetWin += 1;\r\n                    if(playerSetWin === state.totalSet){ //승리하여 세트가 승리 세트에 도달 시 게임 승리\r\n                        // console.log(\"게임 승리\");\r\n                        return{\r\n                            ...state,\r\n                            playerSetWin: playerSetWin,\r\n                            playerRoundWin: playerRoundWin, //0으로 초기화\r\n                            computerRoundWin: 0,\r\n                            win:true,\r\n                            resultForDisplay:\"게임 승리\"\r\n                        }\r\n                    }\r\n\r\n                    return{\r\n                        ...state,\r\n                        playerSetWin: playerSetWin,\r\n                        playerRoundWin: playerRoundWin, //0으로 초기화\r\n                        computerRoundWin: 0,\r\n                        resultForDisplay,\r\n                    }\r\n\r\n                }\r\n                return {\r\n                    ...state,\r\n                    playerRoundWin: playerRoundWin,\r\n                    resultForDisplay\r\n                };\r\n            } else if (result === Result.PLAYER_LOSE) {\r\n                let computerRoundWin = state.computerRoundWin + 1;\r\n                let computerSetWin = state.computerSetWin;\r\n                if(computerRoundWin === state.totalRound){ //승리하여 라운드가 승리 라운드에 도달 시 세트 승\r\n                    computerRoundWin = 0;\r\n                    computerSetWin += 1;\r\n                    if(computerSetWin === state.totalSet){ //승리하여 세트가 승리 세트에 도달 시 게임 승리\r\n                        // console.log(\"게임 패배\");\r\n                        return{\r\n                            ...state,\r\n                            win:false,\r\n                            computerSetWin: computerSetWin,\r\n                            computerRoundWin: computerRoundWin, //0으로 초기화\r\n                            playerRoundWin: 0,\r\n                            resultForDisplay:\"게임 패배\"\r\n                        }\r\n                    }\r\n\r\n                    return{\r\n                        ...state,\r\n                        computerSetWin: computerSetWin,\r\n                        computerRoundWin: computerRoundWin, //0으로 초기화\r\n                        playerRoundWin: 0,\r\n                        resultForDisplay,\r\n                    }\r\n\r\n                }\r\n                return {\r\n                    ...state,\r\n                    computerRoundWin: computerRoundWin,\r\n                    resultForDisplay\r\n                };\r\n            } else if(result === Result.DRAW) {\r\n                return {\r\n                    ...state,\r\n                    rps:\"\",\r\n                    computerRps:\"\",\r\n                    resultForDisplay\r\n                };\r\n\r\n            } else { //결과가 잘못 계산되어짐\r\n                return {\r\n                    ...state,\r\n                };\r\n            }\r\n\r\n        case ActionCreators.SETTING_SET:\r\n            console.log(state);\r\n            return {\r\n                ...state,\r\n                totalSet:action.totalSet,\r\n            };\r\n        case ActionCreators.SETTING_LIMIT_TIME:\r\n            console.log(state);\r\n            return {\r\n                ...state,\r\n                limitTime:action.limitTime,\r\n            };\r\n        case ActionCreators.SETTING_ROUND:\r\n            console.log(state);\r\n            return {\r\n                ...state,\r\n                totalRound:action.totalRound,\r\n            };\r\n        case ActionCreators.QUIT:\r\n            if(state.mCounter !== null){\r\n                clearInterval(state.mCounter);\r\n            }\r\n            return{\r\n                ...initialState,\r\n            };\r\n        case ActionCreators.RETRY:\r\n            if(state.mCounter !== null){\r\n                clearInterval(state.mCounter);\r\n            }\r\n            return{\r\n                ...initialState,\r\n                totalSet:state.totalSet,\r\n                totalRound:state.totalRound,\r\n                limitTime:state.limitTime,\r\n\r\n            };\r\n        default:\r\n            return {...state}\r\n    }\r\n};\r\n\r\nexport default reducer","import reducer from './reducer'\r\nimport {createStore} from \"redux\";\r\n\r\nexport const store = createStore(reducer);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {countDown, startGame, stopGame} from \"../actions\";\r\nimport { store } from '../store';\r\n\r\nconst Counter = ({isStart = false, time, start,limitTime, totalSet, totalRound, win}) => {\r\n    return (\r\n        <div>\r\n            <h1>Counter Component</h1>\r\n            {\r\n                isStart ?\r\n                    <h2>\r\n                        {time}\r\n                    </h2>\r\n                    :\r\n                    <button\r\n                        className={\"btn-start\"}\r\n                        onClick={() => {\r\n                            if(limitTime === 0 || totalSet === 0 || totalRound === 0) {\r\n                                return;\r\n                            }\r\n\r\n                            if(limitTime <= 0){ //limitTime 은 0보다 커야함함\r\n                                return;\r\n                           }\r\n\r\n                            if(win == null) { //경기결과가 나온 경우 시작 X\r\n                                start();\r\n                            }\r\n                        }}\r\n                    >START\r\n                    </button>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n\r\n    return {\r\n        time: state.time,\r\n        isStart: state.isStart,\r\n        limitTime:state.limitTime,\r\n        totalSet:state.totalSet,\r\n        totalRound:state.totalRound,\r\n        win: state.win,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n\r\n    //mCounter();\r\n    return {\r\n        start: () => dispatch(startGame(setInterval(() => dispatch(countDown()), 1000 ))),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst Result = ({resultForDisplay}) => {\r\n    return(\r\n        <div>\r\n            <h1>Result Component</h1>\r\n            <div>{resultForDisplay}</div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    // console.log(state);\r\n    return{\r\n        // userSelect:state.rps,\r\n        // computerSelect:state.computerRps,\r\n        // result:state.result,\r\n        resultForDisplay: state.resultForDisplay,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Result);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {retry} from \"../actions\";\r\n\r\nconst Retry = ({retry}) => {\r\n    return(\r\n        <button\r\n            className={\"btn-retry\"}\r\n            onClick={retry}\r\n        >\r\n            Retry\r\n        </button>\r\n    )\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return{\r\n        retry: () => dispatch(retry()),\r\n    }\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Retry);","import {quit} from \"../actions\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\nconst Quit = ({quit}) => {\r\n    return(\r\n        <button\r\n            className={\"btn-quit\"}\r\n            onClick={quit}\r\n        >\r\n            Quit\r\n        </button>\r\n    )\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return{\r\n        quit: () => dispatch(quit()),\r\n    }\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Quit);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {settingLimitTime, settingRound, settingSet} from \"../actions\";\r\n\r\n\r\nconst Setting = ({settingSet, settingRound, settingLimitTime, set,round,limitTime}) => {\r\n    return (\r\n        <div>\r\n            <h1>Setting</h1>\r\n            <label>게임 승리조건(세트 횟수)</label>\r\n            <input\r\n                type={\"number\"}\r\n                id={\"set\"}\r\n                onChange={settingSet}\r\n                value={set}\r\n            />\r\n\r\n            <label>세트 승리조건(라운드 횟수)</label>\r\n            <input\r\n                type={\"number\"}\r\n                id={\"round\"}\r\n                onChange={settingRound}\r\n                value={round}\r\n            />\r\n\r\n            <label>타이머 MAX시간</label>\r\n            <input\r\n                type={\"number\"}\r\n                id={\"limitTime\"}\r\n                onChange={settingLimitTime}\r\n                value={limitTime}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        set:state.totalSet,\r\n        round:state.totalRound,\r\n        limitTime: state.limitTime,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        settingSet: e => {\r\n            dispatch(settingSet(parseInt(e.target.value)));\r\n        },\r\n        settingRound: e => {\r\n            dispatch(settingRound(parseInt(e.target.value)));\r\n        },\r\n        settingLimitTime: e => {\r\n            dispatch(settingLimitTime(parseInt(e.target.value)));\r\n        }\r\n    }\r\n\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Setting);","import React from 'react';\nimport ScoreBoard from \"./components/ScoreBoard\";\nimport Player from \"./components/Player\";\nimport Counter from \"./components/Counter\";\nimport Result from \"./components/Result\";\nimport Retry from \"./components/Retry\";\nimport Quit from \"./components/Quit\";\nimport Setting from \"./components/Setting\";\n\n\nfunction App() {\n    return (\n        <div className={\"container\"}>\n            <div className={\"description\"}>\n                세팅 Input들에 1이상의 자연수를 입력합니다. <br />\n                세팅에 값을 입력하지 않으면 START 할 수 없습니다. <br />\n                스타트를 누른 후 카운터가 작동하면 \"가위\",\"바위\",\"보\" 를 선택할 수 있습니다. <br />\n                Retry 버튼을 누르면 세팅 값이 초기화 되지 않고 결과만 초기화 됩니다. <br/>\n                Quit 버튼을 누르면 결과 및 세팅값이 초기화 됩니다. <br/>\n            </div>\n            <Setting />\n            <ScoreBoard/>\n            <Player isAuto={false}/>\n            <Counter />\n            <Result/>\n            <div>\n                <Retry/>\n                <Quit/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport App from './App';\nimport {store} from './store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}